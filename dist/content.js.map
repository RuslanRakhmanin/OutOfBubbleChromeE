{"version":3,"file":"content.js","mappings":"yBA6CA,SAASA,EAAmBC,EAAsBC,GAChD,MAAMC,EAAQC,SAASC,SACrB,yBAAyBJ,OACzBG,SAASE,KACT,KACAC,YAAYC,6BACZ,MAGF,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAMO,eAAgBD,IAAK,CAC7C,MAAME,EAAOR,EAAMS,aAAaH,GAC1BI,EAASF,EAAKG,WAEdC,GADOJ,EAAKK,aAAe,IACdC,MAAM,IAAIC,OAAO,IAAIjB,KAAiB,OAEnDkB,EAAWf,SAASgB,yBAC1BL,EAAMM,SAAQC,IACZ,GAAIA,EAAKC,gBAAkBtB,EAAasB,cAAe,CACrD,MAAMC,EAAOpB,SAASqB,cAAc,QACpCD,EAAKE,UAAUC,IAAI,aACnBH,EAAKI,MAAMC,gBAAkB,SAC7BL,EAAKI,MAAME,OAAS,OACpBN,EAAKI,MAAMG,SAAW,WACtBP,EAAKR,YAAcM,EAEnB,MAAMU,EAAgB5B,SAASqB,cAAc,QAC7CO,EAAcN,UAAUC,IAAI,cAC5BK,EAAcJ,MAAMK,WAAa,SACjCD,EAAcJ,MAAMM,MAAQ,QAC5BF,EAAcJ,MAAMC,gBAAkB,OACtCG,EAAcJ,MAAMO,MAAQ,OAC5BH,EAAcJ,MAAMQ,UAAY,SAChCJ,EAAcJ,MAAMS,aAAe,MACnCL,EAAcJ,MAAMU,QAAU,MAC9BN,EAAcJ,MAAMG,SAAW,WAC/BC,EAAcJ,MAAMW,OAAS,OAC7BP,EAAcJ,MAAMY,OAAS,OAC7BR,EAAcJ,MAAMa,KAAO,MAC3BT,EAAcJ,MAAMc,UAAY,mBAChCV,EAAcJ,MAAMe,QAAU,IAC9BX,EAAcJ,MAAMgB,WAAa,eACjCZ,EAAchB,YAAcd,EAE5BsB,EAAKqB,YAAYb,GAGjBR,EAAKsB,iBAAiB,cAAc,KAClCd,EAAcJ,MAAMK,WAAa,UACjCD,EAAcJ,MAAMe,QAAU,GAAG,IAGnCnB,EAAKsB,iBAAiB,cAAc,KAClCd,EAAcJ,MAAMK,WAAa,SACjCD,EAAcJ,MAAMe,QAAU,GAAG,IAGnCxB,EAAS0B,YAAYrB,EACvB,MACEL,EAAS0B,YAAYzC,SAAS2C,eAAezB,GAC/C,IAGFT,EAAOmC,aAAa7B,EAAUR,EAChC,CAGA,MAAMiB,EAAQxB,SAASqB,cAAc,SACrCG,EAAMZ,YAAc,yeAuBpBZ,SAAS6C,KAAKJ,YAAYjB,EAC5B,CA/HAsB,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,K,QACrD,MAAMC,EAAUH,EAIZ,OAFDI,QAAQC,IAAI,kCAAmCJ,EAAOK,GAAIN,GAEjDG,EAAQI,MACd,IAAK,mBACH,IAAIC,EAAoBL,EAAQM,KAChC,IAAK,IAAIC,KAAUF,EACjB9D,EAAmBgE,EAAOC,KAAMD,EAAOE,KAAO,KAAOF,EAAOG,QAE9D,MACF,IAAK,eACHT,QAAQU,KAAKX,EAAQM,MACrB,MACF,IAAK,kBACH,MAAMM,EAAgD,QAAjC,EAAqB,QAArB,EAAAC,OAAOC,sBAAc,eAAEC,kBAAU,QAAI,GAC1Dd,QAAQU,KAAK,gBAAiBC,GAC9Bb,EAAa,CAACa,aAAcA,IAC5B,MACF,QACEX,QAAQe,KAAK,uBAAwBhB,EAAQI,MAGjDL,OAAakB,GAOjBlB,EAJ8B,CAC5BmB,MAAOvE,SAASuE,MAChBC,IAAKN,OAAOO,SAASC,MAED,G","sources":["webpack://out-of-bubble/./src/content.ts"],"sourcesContent":["import { Message, StoredConfig, TabResponse, Tactic} from \"./common\"\r\n\r\nlet config: StoredConfig = {\r\n  enabled: true,\r\n  excludeHosts: [],\r\n  whiteList: [],\r\n}\r\n\r\n// Listen for messages from popup and service worker.\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  const message = request as Message\r\n  if (true) {\r\n     console.log(\"Received message from sender %s\", sender.id, request);\r\n\r\n      switch (message.type) {\r\n        case \"highlightTactics\":\r\n          let tactics: Tactic[] = message.data\r\n          for (let tactic of tactics) {\r\n            searchAndHighlight(tactic.text, tactic.name + \": \" + tactic.reason)\r\n          }\r\n          break\r\n        case \"logToConsole\":\r\n          console.info(message.data)\r\n          break\r\n        case \"getSelectedText\":\r\n          const selectedText = window.getSelection()?.toString() ?? \"\";\r\n          console.info(\"Selected text\", selectedText);\r\n          sendResponse({selectedText: selectedText});\r\n          break\r\n        default:\r\n          console.warn(\"Unknown message type\", message.type)\r\n          break  \r\n      }      \r\n      sendResponse(undefined)\r\n  }\r\n\r\n  const response: TabResponse = {\r\n    title: document.title,\r\n    url: window.location.href,\r\n  }\r\n  sendResponse(response)\r\n})\r\n\r\n\r\n// Search the document for the text to search and highlight it if found.\r\nfunction searchAndHighlight(textToSearch: string, popup_text: string) {\r\n  const nodes = document.evaluate(\r\n    `//text()[contains(., \"${textToSearch}\")]`,\r\n    document.body,\r\n    null,\r\n    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\r\n    null\r\n  );\r\n\r\n  for (let i = 0; i < nodes.snapshotLength; i++) {\r\n    const node = nodes.snapshotItem(i) as Text;\r\n    const parent = node.parentNode as HTMLElement;\r\n    const text = node.textContent || \"\";\r\n    const parts = text.split(new RegExp(`(${textToSearch})`, 'gi'));\r\n\r\n    const fragment = document.createDocumentFragment();\r\n    parts.forEach(part => {\r\n      if (part.toLowerCase() === textToSearch.toLowerCase()) {\r\n        const span = document.createElement(\"span\");\r\n        span.classList.add(\"highlight\");\r\n        span.style.backgroundColor = \"yellow\";\r\n        span.style.cursor = \"help\";\r\n        span.style.position = \"relative\";\r\n        span.textContent = part;\r\n\r\n        const spanPopupInfo = document.createElement(\"span\");\r\n        spanPopupInfo.classList.add(\"popup-info\");\r\n        spanPopupInfo.style.visibility = \"hidden\";\r\n        spanPopupInfo.style.width = \"200px\";\r\n        spanPopupInfo.style.backgroundColor = \"#555\";\r\n        spanPopupInfo.style.color = \"#fff\";\r\n        spanPopupInfo.style.textAlign = \"center\";\r\n        spanPopupInfo.style.borderRadius = \"6px\";\r\n        spanPopupInfo.style.padding = \"5px\";\r\n        spanPopupInfo.style.position = \"absolute\";\r\n        spanPopupInfo.style.zIndex = \"9999\";\r\n        spanPopupInfo.style.bottom = \"100%\";\r\n        spanPopupInfo.style.left = \"50%\";\r\n        spanPopupInfo.style.transform = \"translateX(-50%)\";\r\n        spanPopupInfo.style.opacity = \"0\";\r\n        spanPopupInfo.style.transition = \"opacity 0.3s\";    \r\n        spanPopupInfo.textContent = popup_text;\r\n\r\n        span.appendChild(spanPopupInfo);\r\n\r\n        // Add event listeners for showing/hiding the popup\r\n        span.addEventListener('mouseenter', () => {\r\n          spanPopupInfo.style.visibility = 'visible';\r\n          spanPopupInfo.style.opacity = '1';\r\n        });\r\n\r\n        span.addEventListener('mouseleave', () => {\r\n          spanPopupInfo.style.visibility = 'hidden';\r\n          spanPopupInfo.style.opacity = '0';\r\n        });\r\n\r\n        fragment.appendChild(span);\r\n      } else {\r\n        fragment.appendChild(document.createTextNode(part));\r\n      }\r\n    });\r\n\r\n    parent.replaceChild(fragment, node);\r\n  }\r\n\r\n  // Add a style tag with the necessary CSS\r\n  const style = document.createElement('style');\r\n  style.textContent = `\r\n    .highlight {\r\n      position: relative;\r\n      background-color: yellow;\r\n      cursor: help;\r\n    }\r\n    .popup-info {\r\n      visibility: hidden;\r\n      width: 200px;\r\n      background-color: #555;\r\n      color: #fff;\r\n      text-align: center;\r\n      border-radius: 6px;\r\n      padding: 5px;\r\n      position: absolute;\r\n      z-index: 9999;\r\n      bottom: 100%;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      opacity: 0;\r\n      transition: opacity 0.3s;\r\n    }\r\n  `;\r\n  document.head.appendChild(style);\r\n}\r\n\r\n\r\n// let textToSearch = \"The epidemic of violence against women cannot go on.\"\r\n// searchAndHighlight(textToSearch);\r\n\r\n\r\n"],"names":["searchAndHighlight","textToSearch","popup_text","nodes","document","evaluate","body","XPathResult","UNORDERED_NODE_SNAPSHOT_TYPE","i","snapshotLength","node","snapshotItem","parent","parentNode","parts","textContent","split","RegExp","fragment","createDocumentFragment","forEach","part","toLowerCase","span","createElement","classList","add","style","backgroundColor","cursor","position","spanPopupInfo","visibility","width","color","textAlign","borderRadius","padding","zIndex","bottom","left","transform","opacity","transition","appendChild","addEventListener","createTextNode","replaceChild","head","chrome","runtime","onMessage","addListener","request","sender","sendResponse","message","console","log","id","type","tactics","data","tactic","text","name","reason","info","selectedText","window","getSelection","toString","warn","undefined","title","url","location","href"],"sourceRoot":""}