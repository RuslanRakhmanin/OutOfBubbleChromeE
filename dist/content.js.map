{"version":3,"file":"content.js","mappings":"yBAGA,IAAIA,EAAuB,CACzBC,SAAS,EACTC,aAAc,GACdC,UAAW,IA8GbC,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,K,MACrD,MAAMC,EAAUH,OACQI,IAApBD,EAAQV,UACVY,QAAQC,IAAI,kCAAmCL,EAAOM,GAAIP,GAC1DR,EAAOC,QAAUU,EAAQV,QAEvBD,EAAOC,UACa,QAAnB,EAAAD,EAAOE,oBAAY,SAAEc,SAASC,OAAOC,SAASC,QAsBnDT,EAJ8B,CAC5BU,MAAOC,SAASD,MAChBE,IAAKL,OAAOC,SAASK,MAED,G","sources":["webpack://out-of-bubble/./src/content.ts"],"sourcesContent":["import { Message, StoredConfig, TabResponse, setBadgeIcon } from \"./common\"\n\n\nlet config: StoredConfig = {\n  enabled: true,\n  excludeHosts: [],\n  whiteList: [],\n}\n\n// Search this DOM node for text to blur and blur the parent element if found.\nfunction processNode(node: Node) {\n  // if (node.childNodes.length > 0) {\n  //   Array.from(node.childNodes).forEach(processNode)\n  // }\n  // if (\n  //   node.nodeType === Node.TEXT_NODE &&\n  //   node.textContent !== null &&\n  //   node.textContent.trim().length > 0\n  // ) {\n  //   const parent = node.parentElement\n  //   if (parent == null) {\n  //     return\n  //   }\n  //   if (parent.tagName === \"SCRIPT\" || parent.style.filter === blurFilter) {\n  //     // Already blurred\n  //     return\n  //   }\n  //   if (node.textContent.includes(config.item ?? \"\")) {\n  //     blurElement(parent)\n  //   }\n  // }\n}\n\n// function blurElement(elem: HTMLElement) {\n  // elem.style.filter = blurFilter\n  // console.debug(\n  //   \"blurred id:\" +\n  //     elem.id +\n  //     \" class:\" +\n  //     elem.className +\n  //     \" tag:\" +\n  //     elem.tagName +\n  //     \" text:\" +\n  //     (elem.textContent ?? \"\"),\n  // )\n// }\n\n// console.log(\"Add listener on Activated\")\n// chrome.tabs.onActivated.addListener((activeInfo) => {\n//   console.log(\"Got focus on tab\")\n//   chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n//     const currentTab = tabs[0] as chrome.tabs.Tab\n//     console.log(\"Got focus on tab\", currentTab)\n//     if (currentTab.id === undefined) {\n//       return\n//     }\n//     if (currentTab.url === undefined) {\n//       return\n//     }\n//     if (currentTab.url.startsWith(\"chrome://\")) {\n//       return\n//     }\n    \n//     const message: Message = { type: \"getIconNameByURL\", data: currentTab.url }\n\n//     chrome.runtime\n//       .sendMessage(message)\n//       .then((response) => {\n//         setBadgeIcon(response)\n//         console.info(\"Content received response\", response)\n//       })\n//       .catch((error: unknown) => {\n//         console.warn(\"Content could not send message\", error)\n//       })\n\n//   })\n// })\n\n// Create a MutationObserver to watch for changes to the DOM.\n// const observer = new MutationObserver((mutations) => {\n//   mutations.forEach((mutation) => {\n//     if (mutation.addedNodes.length > 0) {\n//       mutation.addedNodes.forEach(processNode)\n//     } else {\n//       processNode(mutation.target)\n//     }\n//   })\n// })\n\n// // Enable the content script by default.\n// chrome.storage.sync.get(null, (data) => {\n//   // Save the config to a global variable.\n//   config = data as StoredConfig\n//   // Only start observing the DOM if the extension is enabled\n//   if (\n//     config.enabled &&\n//     !config.excludeHosts?.includes(window.location.host)\n//   ) {\n//     // observe()\n//   }\n// })\n\n// function observe() {\n//   if (config.item && config.item.trim().length > 0) {\n//     observer.observe(document, {\n//       attributes: false,\n//       characterData: true,\n//       childList: true,\n//       subtree: true,\n//     })\n//     // Loop through all elements on the page for initial processing.\n//     processNode(document)\n//   }\n// }\n\n// Listen for messages from popup and service worker.\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  const message = request as Message\n  if (message.enabled !== undefined) {\n    console.log(\"Received message from sender %s\", sender.id, request)\n    config.enabled = message.enabled\n    if (\n      config.enabled &&\n      !config.excludeHosts?.includes(window.location.host)\n    ) {\n      // observe()\n    } else {\n      // observer.disconnect()\n    }\n  }\n  // if (message.excludeHosts !== undefined) {\n  //   console.log(\n  //     \"Received excludeHost message from sender %s\",\n  //     sender.id,\n  //     request,\n  //   )\n  //   config.excludeHosts = message.excludeHosts\n  //   if (config.excludeHosts?.includes(window.location.host)) {\n  //     observer.disconnect()\n  //   }\n  // }\n  const response: TabResponse = {\n    title: document.title,\n    url: window.location.href,\n  }\n  sendResponse(response)\n})\n"],"names":["config","enabled","excludeHosts","whiteList","chrome","runtime","onMessage","addListener","request","sender","sendResponse","message","undefined","console","log","id","includes","window","location","host","title","document","url","href"],"sourceRoot":""}